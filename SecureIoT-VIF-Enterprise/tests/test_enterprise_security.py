#!/usr/bin/env python3
"""
Tests automatis√©s de s√©curit√© avanc√©s pour SecureIoT-VIF Enterprise Edition

Tests Enterprise sp√©cialis√©s :
- V√©rification d'int√©grit√© temps r√©el
- Attestation continue autonome
- ML comportemental adaptatif
- Crypto HSM ESP32 int√©gr√©
- D√©tection de sabotage
- Tests de conformit√© Enterprise
"""

import unittest
import serial
import time
import re
import json
import threading
import hashlib
import random
from pathlib import Path
from datetime import datetime

class SecureIoTVIFEnterpriseTests(unittest.TestCase):
    
    @classmethod
    def setUpClass(cls):
        """Configuration initiale des tests Enterprise"""
        cls.serial_port = "/dev/ttyUSB0"  # √Ä adapter selon votre configuration
        cls.baudrate = 115200
        cls.timeout = 60  # Enterprise : timeout plus long pour tests avanc√©s
        cls.enterprise_mode = True
        
    def setUp(self):
        """Configuration avant chaque test Enterprise"""
        try:
            self.ser = serial.Serial(self.serial_port, self.baudrate, timeout=self.timeout)
            time.sleep(3)  # Enterprise : attente plus longue pour initialisation HSM
        except serial.SerialException:
            self.skipTest(f"Port s√©rie {self.serial_port} non disponible")
    
    def tearDown(self):
        """Nettoyage apr√®s chaque test Enterprise"""
        if hasattr(self, 'ser'):
            self.ser.close()
    
    def read_serial_until_pattern(self, pattern, timeout=30):
        """Lit le port s√©rie jusqu'√† trouver un pattern Enterprise"""
        start_time = time.time()
        buffer = ""
        
        while time.time() - start_time < timeout:
            if self.ser.in_waiting:
                data = self.ser.read(self.ser.in_waiting).decode('utf-8', errors='ignore')
                buffer += data
                
                if re.search(pattern, buffer, re.MULTILINE):
                    return buffer
        
        return buffer
    
    def test_01_enterprise_boot_sequence(self):
        """Test de la s√©quence de d√©marrage s√©curis√© Enterprise"""
        print("üè¢ Test s√©quence de d√©marrage Enterprise...")
        
        # Red√©marrer l'ESP32
        self.ser.setDTR(False)
        time.sleep(0.1)
        self.ser.setDTR(True)
        
        # Attendre les messages de d√©marrage Enterprise
        boot_log = self.read_serial_until_pattern(r"=== Enterprise Edition Op√©rationnel ===", timeout=45)
        
        # V√©rifications Enterprise sp√©cifiques
        enterprise_checks = [
            "D√©marrage SecureIoT-VIF Enterprise",
            "Hardware Security Module (HSM) Enterprise",
            "True Random Number Generator (TRNG) actif",
            "eFuse protection activ√©e",
            "Secure Boot v2 valid√©",
            "Flash Encryption activ√©",
            "Auto-test Crypto Enterprise R√âUSSI",
            "Attestation continue d√©marr√©e",
            "ML anomaly detection initialis√©",
            "V√©rification int√©grit√© temps r√©el active",
            "Enterprise Edition Op√©rationnel"
        ]
        
        for check in enterprise_checks:
            self.assertIn(check, boot_log, f"V√©rification Enterprise manquante: {check}")
        
        print("‚úÖ S√©quence de d√©marrage Enterprise OK")
    
    def test_02_hsm_crypto_advanced(self):
        """Test des fonctionnalit√©s crypto HSM avanc√©es Enterprise"""
        print("üè¢ Test crypto HSM ESP32 avanc√©...")
        
        boot_log = self.read_serial_until_pattern(r"Auto-test Crypto Enterprise R√âUSSI", timeout=30)
        
        # V√©rifications HSM Enterprise
        hsm_checks = [
            "Hardware Security Module (HSM) Enterprise",
            "True Random Number Generator (TRNG)",
            "AES Hardware Acceleration",
            "SHA Hardware Acceleration", 
            "RSA Hardware Acceleration",
            "ECDSA P-256 natif",
            "eFuse protection activ√©e",
            "Secure Boot v2 valid√©",
            "Flash Encryption activ√©",
            "Auto-test Crypto Enterprise R√âUSSI"
        ]
        
        for check in hsm_checks:
            self.assertIn(check, boot_log, f"Fonctionnalit√© HSM manquante: {check}")
        
        # V√©rifier les m√©triques de performance crypto
        perf_match = re.search(r"Crypto performance: (\d+)ms", boot_log)
        if perf_match:
            crypto_time = int(perf_match.group(1))
            self.assertLess(crypto_time, 50, f"Performance crypto HSM trop lente: {crypto_time}ms > 50ms")
        
        print("‚úÖ Crypto HSM ESP32 avanc√© OK")
    
    def test_03_realtime_integrity_verification(self):
        """Test de v√©rification d'int√©grit√© temps r√©el Enterprise"""
        print("üè¢ Test v√©rification d'int√©grit√© temps r√©el...")
        
        # Attendre plusieurs cycles de v√©rification temps r√©el
        integrity_log = self.read_serial_until_pattern(r"V√©rification temps r√©el cycle \d+", timeout=120)
        
        # V√©rifications temps r√©el
        realtime_checks = [
            "V√©rification int√©grit√© temps r√©el active",
            "D√©marrage v√©rification segment√©e",
            "V√©rification temps r√©el cycle",
            "Int√©grit√© temps r√©el: OK"
        ]
        
        for check in realtime_checks:
            self.assertIn(check, integrity_log, f"Fonctionnalit√© temps r√©el manquante: {check}")
        
        # V√©rifier les performances temps r√©el
        cycle_matches = re.findall(r"V√©rification temps r√©el cycle \d+: (\d+)ms", integrity_log)
        if cycle_matches:
            cycle_times = [int(t) for t in cycle_matches]
            avg_time = sum(cycle_times) / len(cycle_times)
            
            self.assertLess(avg_time, 200, f"Temps v√©rification temps r√©el trop lent: {avg_time}ms > 200ms")
            self.assertGreater(len(cycle_times), 2, "Pas assez de cycles temps r√©el d√©tect√©s")
        
        print("‚úÖ V√©rification d'int√©grit√© temps r√©el OK")
    
    def test_04_continuous_attestation(self):
        """Test d'attestation continue autonome Enterprise"""
        print("üè¢ Test attestation continue autonome...")
        
        # Attendre plusieurs cycles d'attestation
        attestation_log = self.read_serial_until_pattern(r"Attestation autonome cycle \d+", timeout=90)
        
        # V√©rifications attestation continue
        attestation_checks = [
            "Attestation continue d√©marr√©e",
            "Ex√©cution attestation autonome",
            "Attestation autonome cycle",
            "Renouvellement automatique r√©ussi",
            "Attestation continue: OK"
        ]
        
        for check in attestation_checks:
            self.assertIn(check, attestation_log, f"Fonctionnalit√© attestation manquante: {check}")
        
        # V√©rifier la p√©riodicit√© (toutes les 30s Enterprise)
        cycle_matches = re.findall(r"Attestation autonome cycle (\d+)", attestation_log)
        if len(cycle_matches) >= 2:
            self.assertGreaterEqual(len(cycle_matches), 2, "Pas assez de cycles d'attestation")
        
        print("‚úÖ Attestation continue autonome OK")
    
    def test_05_ml_behavioral_detection(self):
        """Test de d√©tection comportementale ML Enterprise"""
        print("üè¢ Test d√©tection comportementale ML...")
        
        # Attendre l'initialisation et l'apprentissage ML
        ml_log = self.read_serial_until_pattern(r"ML: mod√®le comportemental mis √† jour", timeout=120)
        
        # V√©rifications ML comportemental
        ml_checks = [
            "ML anomaly detection initialis√©", 
            "Apprentissage comportemental d√©marr√©",
            "ML: analyse comportementale",
            "ML: mod√®le comportemental mis √† jour",
            "Score adaptatif calcul√©"
        ]
        
        for check in ml_checks:
            self.assertIn(check, ml_log, f"Fonctionnalit√© ML manquante: {check}")
        
        # V√©rifier les scores ML
        score_matches = re.findall(r"Score ML: (\d+)/100", ml_log)
        if score_matches:
            scores = [int(s) for s in score_matches]
            avg_score = sum(scores) / len(scores)
            
            self.assertGreaterEqual(avg_score, 70, f"Score ML comportemental trop bas: {avg_score} < 70")
        
        print("‚úÖ D√©tection comportementale ML OK")
    
    def test_06_tamper_detection(self):
        """Test de d√©tection de tentatives de sabotage Enterprise"""
        print("üè¢ Test d√©tection de sabotage...")
        
        # Lire les logs pour d√©tecter le monitoring de sabotage
        tamper_log = self.read_serial_until_pattern(r"Monitoring sabotage actif", timeout=60)
        
        # V√©rifications d√©tection sabotage
        tamper_checks = [
            "D√©tection sabotage initialis√©e",
            "Monitoring sabotage actif",
            "Surveillance physique active"
        ]
        
        for check in tamper_checks:
            self.assertIn(check, tamper_log, f"Fonctionnalit√© sabotage manquante: {check}")
        
        # Si sabotage d√©tect√©, v√©rifier la r√©ponse
        if "ALERTE: Tentative de sabotage" in tamper_log:
            self.assertIn("Mesures de protection activ√©es", tamper_log)
            print("‚ö†Ô∏è Tentative de sabotage d√©tect√©e et trait√©e")
        else:
            print("‚ÑπÔ∏è Aucun sabotage d√©tect√© (environnement s√©curis√©)")
        
        print("‚úÖ D√©tection de sabotage OK")
    
    def test_07_sensor_reading_advanced(self):
        """Test de lecture des capteurs avec validation Enterprise"""
        print("üè¢ Test lecture capteurs avanc√©s...")
        
        # Attendre plusieurs lectures avec validation
        sensor_log = self.read_serial_until_pattern(r"Lecture capteur valid√©e:", timeout=45)
        
        # V√©rifications capteurs Enterprise
        self.assertIn("Lecture capteur valid√©e:", sensor_log)
        self.assertIn("Validation HSM:", sensor_log)
        self.assertIn("Score ML:", sensor_log)
        
        # Extraire les valeurs avec validation
        reading_matches = re.findall(r"T=([\d.-]+)¬∞C, H=([\d.-]+)%, Q=(\d+), HSM:OK, ML:(\d+)", sensor_log)
        
        for reading in reading_matches:
            temp, humidity, quality, ml_score = reading
            temp = float(temp)
            humidity = float(humidity)
            quality = int(quality)
            ml_score = int(ml_score)
            
            # V√©rifier les plages valides Enterprise
            self.assertGreaterEqual(temp, -40.0, "Temp√©rature dans la plage DHT22")
            self.assertLessEqual(temp, 80.0, "Temp√©rature dans la plage DHT22")
            self.assertGreaterEqual(humidity, 0.0, "Humidit√© dans la plage DHT22")
            self.assertLessEqual(humidity, 100.0, "Humidit√© dans la plage DHT22")
            self.assertGreaterEqual(quality, 0, "Score de qualit√© valide")
            self.assertLessEqual(quality, 100, "Score de qualit√© valide")
            self.assertGreaterEqual(ml_score, 50, "Score ML valide Enterprise")
        
        print("‚úÖ Lecture capteurs avanc√©s OK")
    
    def test_08_performance_benchmarks(self):
        """Test des benchmarks de performance Enterprise"""
        print("üè¢ Test benchmarks de performance...")
        
        # Collecter les m√©triques pendant 60 secondes
        metrics_log = self.read_serial_until_pattern(r"Benchmark Enterprise:", timeout=60)
        
        # Analyser les benchmarks Enterprise
        benchmark_patterns = [
            (r"Boot time: (\d+)ms", 3000, "Boot time trop lent"),
            (r"Crypto speed: (\d+)ms", 50, "Crypto trop lent"),
            (r"Integrity check: (\d+)ms", 200, "V√©rification int√©grit√© trop lente"),
            (r"ML processing: (\d+)ms", 10, "Traitement ML trop lent"),
            (r"Attestation time: (\d+)ms", 100, "Attestation trop lente")
        ]
        
        for pattern, max_time, error_msg in benchmark_patterns:
            match = re.search(pattern, metrics_log)
            if match:
                measured_time = int(match.group(1))
                self.assertLess(measured_time, max_time, f"{error_msg}: {measured_time}ms > {max_time}ms")
        
        print("‚úÖ Benchmarks de performance OK")
    
    def test_09_security_levels(self):
        """Test des niveaux de s√©curit√© Enterprise"""
        print("üè¢ Test niveaux de s√©curit√©...")
        
        # V√©rifier les niveaux de s√©curit√© configur√©s
        security_log = self.read_serial_until_pattern(r"Niveau s√©curit√© Enterprise: \d", timeout=30)
        
        # V√©rifications niveaux s√©curit√©
        security_checks = [
            "Configuration s√©curit√© Enterprise",
            "Niveau s√©curit√© Enterprise:",
            "Politique s√©curit√© activ√©e"
        ]
        
        for check in security_checks:
            self.assertIn(check, security_log, f"Configuration s√©curit√© manquante: {check}")
        
        # Extraire le niveau de s√©curit√©
        level_match = re.search(r"Niveau s√©curit√© Enterprise: (\d)", security_log)
        if level_match:
            security_level = int(level_match.group(1))
            self.assertGreaterEqual(security_level, 1, "Niveau s√©curit√© invalide")
            self.assertLessEqual(security_level, 5, "Niveau s√©curit√© invalide")
        
        print("‚úÖ Niveaux de s√©curit√© OK")
    
    def test_10_compliance_validation(self):
        """Test de validation de conformit√© Enterprise"""
        print("üè¢ Test validation de conformit√©...")
        
        # V√©rifier les standards de conformit√©
        compliance_log = self.read_serial_until_pattern(r"Conformit√© valid√©e:", timeout=45)
        
        # V√©rifications conformit√© Enterprise
        compliance_checks = [
            "V√©rification conformit√© IEC 62443",
            "Validation ISO 27001",
            "Conformit√© FIPS 140-2",
            "Conformit√© valid√©e:"
        ]
        
        for check in compliance_checks:
            self.assertIn(check, compliance_log, f"Conformit√© manquante: {check}")
        
        print("‚úÖ Validation de conformit√© OK")

def run_enterprise_tests():
    """Ex√©cute tous les tests Enterprise"""
    print("üè¢ D√©marrage des tests SecureIoT-VIF Enterprise Edition")
    print("=" * 60)
    
    # Cr√©er la suite de tests
    test_suite = unittest.TestLoader().loadTestsFromTestCase(SecureIoTVIFEnterpriseTests)
    
    # Ex√©cuter les tests
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(test_suite)
    
    # R√©sum√© Enterprise
    print("=" * 60)
    if result.wasSuccessful():
        print("‚úÖ Tous les tests Enterprise sont pass√©s avec succ√®s!")
        print("üè¢ SecureIoT-VIF Enterprise Edition valid√©e")
    else:
        print(f"‚ùå {len(result.failures)} tests √©chou√©s, {len(result.errors)} erreurs")
        
        for test, error in result.failures + result.errors:
            print(f"‚ùå {test}: {error}")
    
    return result.wasSuccessful()

if __name__ == "__main__":
    success = run_enterprise_tests()
    exit(0 if success else 1)