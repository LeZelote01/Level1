#!/usr/bin/env python3
"""
Tests de stress et de performance pour SecureIoT-VIF Enterprise Edition

Tests de charge Enterprise :
- Tests de stress longue dur√©e (24h)
- Tests de charge syst√®me
- Tests de performance sous contraintes
- Validation industrielle
- Tests environnementaux simul√©s
"""

import unittest
import serial
import time
import re
import json
import threading
import statistics
import psutil
import tempfile
from pathlib import Path
from datetime import datetime, timedelta

class SecureIoTVIFStressTests(unittest.TestCase):
    
    @classmethod
    def setUpClass(cls):
        """Configuration initiale des tests de stress"""
        cls.serial_port = "/dev/ttyUSB0"
        cls.baudrate = 115200
        cls.timeout = 300  # 5 minutes pour tests de stress
        cls.stress_duration = 3600  # 1 heure par d√©faut (24h en production)
        cls.metrics = []
        cls.start_time = None
        
    def setUp(self):
        """Configuration avant chaque test de stress"""
        try:
            self.ser = serial.Serial(self.serial_port, self.baudrate, timeout=self.timeout)
            time.sleep(5)  # Stabilisation pour tests de stress
            self.start_time = datetime.now()
        except serial.SerialException:
            self.skipTest(f"Port s√©rie {self.serial_port} non disponible")
    
    def tearDown(self):
        """Nettoyage apr√®s chaque test de stress"""
        if hasattr(self, 'ser'):
            self.ser.close()
    
    def collect_metrics(self, pattern, timeout=60):
        """Collecte des m√©triques de performance"""
        start_time = time.time()
        buffer = ""
        metrics = []
        
        while time.time() - start_time < timeout:
            if self.ser.in_waiting:
                data = self.ser.read(self.ser.in_waiting).decode('utf-8', errors='ignore')
                buffer += data
                
                # Extraire les m√©triques
                matches = re.findall(pattern, buffer)
                for match in matches:
                    metrics.append(match)
                
                # Nettoyer le buffer pour √©viter la surcharge m√©moire
                if len(buffer) > 10000:
                    buffer = buffer[-5000:]
        
        return metrics
    
    def test_01_boot_stress_test(self):
        """Test de stress des d√©marrages r√©p√©t√©s"""
        print("üí™ Test de stress d√©marrages r√©p√©t√©s...")
        
        boot_times = []
        boot_count = 10  # 100 en production
        
        for i in range(boot_count):
            print(f"  D√©marrage {i+1}/{boot_count}")
            
            # Red√©marrer l'ESP32
            self.ser.setDTR(False)
            time.sleep(0.5)
            self.ser.setDTR(True)
            
            # Mesurer le temps de d√©marrage
            start_time = time.time()
            boot_log = ""
            
            while time.time() - start_time < 30:
                if self.ser.in_waiting:
                    data = self.ser.read(self.ser.in_waiting).decode('utf-8', errors='ignore')
                    boot_log += data
                    
                    if "Enterprise Edition Op√©rationnel" in boot_log:
                        boot_time = (time.time() - start_time) * 1000  # en ms
                        boot_times.append(boot_time)
                        break
            
            time.sleep(2)  # Pause entre d√©marrages
        
        # Analyser les r√©sultats
        if boot_times:
            avg_boot = statistics.mean(boot_times)
            max_boot = max(boot_times)
            min_boot = min(boot_times)
            std_boot = statistics.stdev(boot_times) if len(boot_times) > 1 else 0
            
            print(f"  Temps de d√©marrage: Moy={avg_boot:.1f}ms, Max={max_boot:.1f}ms, Min={min_boot:.1f}ms, Std={std_boot:.1f}ms")
            
            # V√©rifications de performance
            self.assertLess(avg_boot, 5000, f"Temps moyen de d√©marrage trop long: {avg_boot:.1f}ms > 5000ms")
            self.assertLess(max_boot, 10000, f"Temps max de d√©marrage trop long: {max_boot:.1f}ms > 10000ms")
            self.assertLess(std_boot, 1000, f"Variabilit√© de d√©marrage trop √©lev√©e: {std_boot:.1f}ms > 1000ms")
        
        print("‚úÖ Test de stress d√©marrages OK")
    
    def test_02_crypto_performance_stress(self):
        """Test de stress des op√©rations cryptographiques"""
        print("üí™ Test de stress crypto HSM...")
        
        # D√©marrer le test de stress crypto
        self.ser.write(b"crypto_stress_test\n")
        
        # Collecter les m√©triques crypto pendant 5 minutes
        crypto_metrics = self.collect_metrics(r"Crypto: (\d+)ms, (\w+)", timeout=300)
        
        if crypto_metrics:
            # Analyser les performances crypto
            aes_times = []
            sha_times = []
            ecdsa_times = []
            
            for time_str, operation in crypto_metrics:
                op_time = int(time_str)
                if operation == "AES":
                    aes_times.append(op_time)
                elif operation == "SHA":
                    sha_times.append(op_time)
                elif operation == "ECDSA":
                    ecdsa_times.append(op_time)
            
            # V√©rifications performance crypto
            if aes_times:
                avg_aes = statistics.mean(aes_times)
                self.assertLess(avg_aes, 10, f"Performance AES HSM d√©grad√©e: {avg_aes:.1f}ms > 10ms")
            
            if sha_times:
                avg_sha = statistics.mean(sha_times)
                self.assertLess(avg_sha, 5, f"Performance SHA HSM d√©grad√©e: {avg_sha:.1f}ms > 5ms")
            
            if ecdsa_times:
                avg_ecdsa = statistics.mean(ecdsa_times)
                self.assertLess(avg_ecdsa, 50, f"Performance ECDSA HSM d√©grad√©e: {avg_ecdsa:.1f}ms > 50ms")
        
        print("‚úÖ Test de stress crypto OK")
    
    def test_03_integrity_continuous_stress(self):
        """Test de stress v√©rification d'int√©grit√© continue"""
        print("üí™ Test de stress v√©rification continue...")
        
        # Activer la v√©rification continue intensive
        self.ser.write(b"integrity_stress_mode\n")
        time.sleep(2)
        
        # Collecter les m√©triques d'int√©grit√© pendant 10 minutes
        integrity_metrics = self.collect_metrics(r"Int√©grit√©: (\d+)ms, Chunks:(\d+)", timeout=600)
        
        if integrity_metrics:
            integrity_times = []
            chunk_counts = []
            
            for time_str, chunks_str in integrity_metrics:
                integrity_times.append(int(time_str))
                chunk_counts.append(int(chunks_str))
            
            # Analyser la performance
            if integrity_times:
                avg_integrity = statistics.mean(integrity_times)
                max_integrity = max(integrity_times)
                
                print(f"  V√©rification int√©grit√©: Moy={avg_integrity:.1f}ms, Max={max_integrity:.1f}ms")
                
                # V√©rifications performance
                self.assertLess(avg_integrity, 500, f"Performance int√©grit√© d√©grad√©e: {avg_integrity:.1f}ms > 500ms")
                self.assertLess(max_integrity, 2000, f"Pic int√©grit√© trop √©lev√©: {max_integrity:.1f}ms > 2000ms")
            
            # V√©rifier la coh√©rence des chunks
            if chunk_counts:
                unique_chunks = set(chunk_counts)
                self.assertEqual(len(unique_chunks), 1, "Incoh√©rence dans le nombre de chunks")
        
        print("‚úÖ Test de stress v√©rification continue OK")
    
    def test_04_ml_learning_stress(self):
        """Test de stress apprentissage ML continu"""
        print("üí™ Test de stress apprentissage ML...")
        
        # Activer l'apprentissage ML intensif
        self.ser.write(b"ml_learning_stress\n")
        time.sleep(2)
        
        # Collecter les m√©triques ML pendant 8 minutes
        ml_metrics = self.collect_metrics(r"ML: (\d+)ms, Score:(\d+), Mod√®le:(\d+)", timeout=480)
        
        if ml_metrics:
            ml_times = []
            ml_scores = []
            model_updates = []
            
            for time_str, score_str, updates_str in ml_metrics:
                ml_times.append(int(time_str))
                ml_scores.append(int(score_str))
                model_updates.append(int(updates_str))
            
            # Analyser la performance ML
            if ml_times:
                avg_ml = statistics.mean(ml_times)
                max_ml = max(ml_times)
                
                print(f"  ML Processing: Moy={avg_ml:.1f}ms, Max={max_ml:.1f}ms")
                
                # V√©rifications performance ML
                self.assertLess(avg_ml, 50, f"Performance ML d√©grad√©e: {avg_ml:.1f}ms > 50ms")
                self.assertLess(max_ml, 200, f"Pic ML trop √©lev√©: {max_ml:.1f}ms > 200ms")
            
            # V√©rifier l'√©volution du score ML
            if ml_scores and len(ml_scores) > 5:
                # Le score doit s'am√©liorer avec l'apprentissage
                first_scores = ml_scores[:5]
                last_scores = ml_scores[-5:]
                
                avg_first = statistics.mean(first_scores)
                avg_last = statistics.mean(last_scores)
                
                print(f"  Score ML √©volution: {avg_first:.1f} -> {avg_last:.1f}")
                # Note: En stress test, le score peut ne pas forc√©ment s'am√©liorer
        
        print("‚úÖ Test de stress apprentissage ML OK")
    
    def test_05_memory_leak_detection(self):
        """Test de d√©tection de fuites m√©moire"""
        print("üí™ Test d√©tection fuites m√©moire...")
        
        # D√©marrer le monitoring m√©moire
        self.ser.write(b"memory_monitor_start\n")
        time.sleep(2)
        
        # Collecter les m√©triques m√©moire pendant 15 minutes
        memory_metrics = self.collect_metrics(r"M√©moire: Libre:(\d+), Utilis√©e:(\d+), Heap:(\d+)", timeout=900)
        
        if memory_metrics and len(memory_metrics) > 10:
            free_memory = []
            used_memory = []
            heap_memory = []
            
            for free_str, used_str, heap_str in memory_metrics:
                free_memory.append(int(free_str))
                used_memory.append(int(used_str))
                heap_memory.append(int(heap_str))
            
            # Analyser les tendances m√©moire
            print(f"  √âchantillons m√©moire collect√©s: {len(memory_metrics)}")
            
            # D√©tecter les fuites (tendance d√©croissante de la m√©moire libre)
            if len(free_memory) > 20:
                first_quarter = free_memory[:len(free_memory)//4]
                last_quarter = free_memory[-len(free_memory)//4:]
                
                avg_first = statistics.mean(first_quarter)
                avg_last = statistics.mean(last_quarter)
                memory_loss = avg_first - avg_last
                
                print(f"  √âvolution m√©moire libre: {avg_first:.0f} -> {avg_last:.0f} bytes")
                
                # V√©rifier qu'il n'y a pas de fuite significative
                self.assertLess(memory_loss, 10000, f"Fuite m√©moire d√©tect√©e: {memory_loss:.0f} bytes perdus")
            
            # V√©rifier les limites m√©moire
            min_free = min(free_memory)
            self.assertGreater(min_free, 50000, f"M√©moire libre critique: {min_free} bytes < 50KB")
        
        print("‚úÖ Test d√©tection fuites m√©moire OK")
    
    def test_06_sensor_data_flood(self):
        """Test de stress lecture intensive capteurs"""
        print("üí™ Test de stress lecture capteurs intensive...")
        
        # Activer la lecture intensive des capteurs
        self.ser.write(b"sensor_flood_test\n")
        time.sleep(2)
        
        # Collecter les m√©triques capteurs pendant 5 minutes
        sensor_metrics = self.collect_metrics(r"Capteur: T=([\d.-]+), H=([\d.-]+), Q=(\d+), Temps:(\d+)ms", timeout=300)
        
        if sensor_metrics:
            sensor_times = []
            temperatures = []
            humidities = []
            qualities = []
            
            for temp_str, hum_str, qual_str, time_str in sensor_metrics:
                temperatures.append(float(temp_str))
                humidities.append(float(hum_str))
                qualities.append(int(qual_str))
                sensor_times.append(int(time_str))
            
            print(f"  Lectures capteurs collect√©es: {len(sensor_metrics)}")
            
            # Analyser la performance de lecture
            if sensor_times:
                avg_sensor_time = statistics.mean(sensor_times)
                max_sensor_time = max(sensor_times)
                
                print(f"  Temps lecture capteur: Moy={avg_sensor_time:.1f}ms, Max={max_sensor_time:.1f}ms")
                
                # V√©rifications performance capteur
                self.assertLess(avg_sensor_time, 100, f"Performance capteur d√©grad√©e: {avg_sensor_time:.1f}ms > 100ms")
                self.assertLess(max_sensor_time, 500, f"Pic lecture capteur: {max_sensor_time:.1f}ms > 500ms")
            
            # V√©rifier la qualit√© des donn√©es
            if qualities:
                avg_quality = statistics.mean(qualities)
                min_quality = min(qualities)
                
                print(f"  Qualit√© donn√©es: Moy={avg_quality:.1f}, Min={min_quality}")
                
                self.assertGreater(avg_quality, 70, f"Qualit√© donn√©es d√©grad√©e: {avg_quality:.1f} < 70")
                self.assertGreater(min_quality, 50, f"Qualit√© minimale insuffisante: {min_quality} < 50")
        
        print("‚úÖ Test de stress lecture capteurs OK")
    
    def test_07_power_management_stress(self):
        """Test de stress gestion √©nerg√©tique"""
        print("üí™ Test de stress gestion √©nerg√©tique...")
        
        # Activer les cycles de gestion √©nerg√©tique
        self.ser.write(b"power_management_stress\n")
        time.sleep(2)
        
        # Collecter les m√©triques √©nerg√©tiques pendant 10 minutes
        power_metrics = self.collect_metrics(r"√ânergie: Mode:(\w+), Conso:(\d+)mA, Dur√©e:(\d+)ms", timeout=600)
        
        if power_metrics:
            power_modes = []
            consumptions = []
            durations = []
            
            for mode, conso_str, duration_str in power_metrics:
                power_modes.append(mode)
                consumptions.append(int(conso_str))
                durations.append(int(duration_str))
            
            print(f"  Cycles √©nerg√©tiques collect√©s: {len(power_metrics)}")
            
            # Analyser les modes √©nerg√©tiques
            unique_modes = set(power_modes)
            print(f"  Modes utilis√©s: {', '.join(unique_modes)}")
            
            # V√©rifier que plusieurs modes sont utilis√©s (gestion dynamique)
            self.assertGreaterEqual(len(unique_modes), 2, "Gestion √©nerg√©tique pas assez dynamique")
            
            # Analyser la consommation
            if consumptions:
                avg_consumption = statistics.mean(consumptions)
                max_consumption = max(consumptions)
                
                print(f"  Consommation: Moy={avg_consumption:.1f}mA, Max={max_consumption}mA")
                
                # V√©rifications consommation
                self.assertLess(avg_consumption, 150, f"Consommation moyenne √©lev√©e: {avg_consumption:.1f}mA > 150mA")
                self.assertLess(max_consumption, 250, f"Pic de consommation: {max_consumption}mA > 250mA")
        
        print("‚úÖ Test de stress gestion √©nerg√©tique OK")
    
    def test_08_system_resilience(self):
        """Test de r√©silience syst√®me sous stress"""
        print("üí™ Test de r√©silience syst√®me...")
        
        # Test de r√©silience combin√©e
        test_commands = [
            b"full_system_stress\n",
            b"error_injection_test\n",
            b"recovery_test\n"
        ]
        
        resilience_scores = []
        
        for cmd in test_commands:
            self.ser.write(cmd)
            time.sleep(1)
            
            # Collecter les m√©triques de r√©silience
            resilience_metrics = self.collect_metrics(r"R√©silience: Score:(\d+), R√©cup√©ration:(\d+)ms", timeout=120)
            
            for score_str, recovery_str in resilience_metrics:
                score = int(score_str)
                recovery_time = int(recovery_str)
                
                resilience_scores.append(score)
                
                # V√©rifications r√©silience
                self.assertGreaterEqual(score, 80, f"Score de r√©silience insuffisant: {score} < 80")
                self.assertLess(recovery_time, 5000, f"Temps de r√©cup√©ration trop long: {recovery_time}ms > 5000ms")
        
        if resilience_scores:
            avg_resilience = statistics.mean(resilience_scores)
            print(f"  Score de r√©silience moyen: {avg_resilience:.1f}/100")
            self.assertGreaterEqual(avg_resilience, 85, f"R√©silience syst√®me insuffisante: {avg_resilience:.1f} < 85")
        
        print("‚úÖ Test de r√©silience syst√®me OK")

def run_stress_tests():
    """Ex√©cute tous les tests de stress"""
    print("üí™ D√©marrage des tests de stress SecureIoT-VIF Enterprise")
    print("=" * 60)
    
    # Cr√©er la suite de tests
    test_suite = unittest.TestLoader().loadTestsFromTestCase(SecureIoTVIFStressTests)
    
    # Ex√©cuter les tests
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(test_suite)
    
    # R√©sum√© des tests de stress
    print("=" * 60)
    if result.wasSuccessful():
        print("‚úÖ Tous les tests de stress sont pass√©s avec succ√®s!")
        print("üí™ SecureIoT-VIF Enterprise r√©siste aux conditions extr√™mes")
    else:
        print(f"‚ùå {len(result.failures)} tests √©chou√©s, {len(result.errors)} erreurs")
        
        for test, error in result.failures + result.errors:
            print(f"‚ùå {test}: {error}")
    
    return result.wasSuccessful()

if __name__ == "__main__":
    success = run_stress_tests()
    exit(0 if success else 1)