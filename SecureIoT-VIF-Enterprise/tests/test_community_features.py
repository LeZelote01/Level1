#!/usr/bin/env python3
"""
Tests des fonctionnalit√©s de base (Community) pour SecureIoT-VIF Enterprise Edition

Tests Community adapt√©s pour Enterprise :
- V√©rification que toutes les fonctionnalit√©s Community sont pr√©sentes
- Tests de compatibilit√© descendante
- Validation de la coexistence Community/Enterprise
"""

import unittest
import serial
import time
import re
import json
from pathlib import Path

class SecureIoTVIFCommunityFeaturesTests(unittest.TestCase):
    
    @classmethod
    def setUpClass(cls):
        """Configuration initiale des tests Community"""
        cls.serial_port = "/dev/ttyUSB0"
        cls.baudrate = 115200
        cls.timeout = 60
        
    def setUp(self):
        """Configuration avant chaque test Community"""
        try:
            self.ser = serial.Serial(self.serial_port, self.baudrate, timeout=self.timeout)
            time.sleep(2)
        except serial.SerialException:
            self.skipTest(f"Port s√©rie {self.serial_port} non disponible")
    
    def tearDown(self):
        """Nettoyage apr√®s chaque test Community"""
        if hasattr(self, 'ser'):
            self.ser.close()
    
    def read_serial_until_pattern(self, pattern, timeout=30):
        """Lit le port s√©rie jusqu'√† trouver un pattern"""
        start_time = time.time()
        buffer = ""
        
        while time.time() - start_time < timeout:
            if self.ser.in_waiting:
                data = self.ser.read(self.ser.in_waiting).decode('utf-8', errors='ignore')
                buffer += data
                
                if re.search(pattern, buffer, re.MULTILINE):
                    return buffer
        
        return buffer
    
    def test_01_basic_boot_sequence(self):
        """Test de la s√©quence de d√©marrage basique Community"""
        print("üéì Test s√©quence de d√©marrage basique...")
        
        # Red√©marrer l'ESP32
        self.ser.setDTR(False)
        time.sleep(0.1)
        self.ser.setDTR(True)
        
        # Attendre les messages de d√©marrage de base
        boot_log = self.read_serial_until_pattern(r"Syst√®me initialis√©", timeout=45)
        
        # V√©rifications Community de base (doivent √™tre pr√©sentes dans Enterprise)
        community_checks = [
            "D√©marrage SecureIoT-VIF",
            "Initialisation du gestionnaire crypto",
            "V√©rificateur d'int√©grit√© initialis√©", 
            "Gestionnaire d'attestation initialis√©",
            "Gestionnaire de capteurs initialis√©",
            "Syst√®me initialis√©"
        ]
        
        for check in community_checks:
            self.assertIn(check, boot_log, f"Fonctionnalit√© Community manquante: {check}")
        
        print("‚úÖ S√©quence de d√©marrage basique OK")
    
    def test_02_basic_crypto_operations(self):
        """Test des op√©rations crypto de base Community"""
        print("üéì Test op√©rations crypto de base...")
        
        # Tester les op√©rations crypto basiques
        self.ser.write(b"crypto_basic_test\n")
        crypto_log = self.read_serial_until_pattern(r"Tests crypto de base termin√©s", timeout=60)
        
        # V√©rifications crypto Community
        crypto_checks = [
            "Test crypto de base d√©marr√©",
            "AES-256 encryption: OK",
            "AES-256 decryption: OK", 
            "SHA-256 hash: OK",
            "Random generation: OK",
            "Tests crypto de base termin√©s"
        ]
        
        for check in crypto_checks:
            self.assertIn(check, crypto_log, f"Op√©ration crypto de base √©chou√©e: {check}")
        
        # V√©rifier les performances de base (moins strictes que Enterprise)
        perf_match = re.search(r"Performance crypto: (\d+)ms", crypto_log)
        if perf_match:
            crypto_time = int(perf_match.group(1))
            self.assertLess(crypto_time, 500, f"Performance crypto de base lente: {crypto_time}ms > 500ms")
        
        print("‚úÖ Op√©rations crypto de base OK")
    
    def test_03_basic_integrity_verification(self):
        """Test de v√©rification d'int√©grit√© de base Community"""
        print("üéì Test v√©rification d'int√©grit√© de base...")
        
        # Tester la v√©rification d'int√©grit√© au d√©marrage (Community)
        self.ser.write(b"integrity_basic_check\n")
        integrity_log = self.read_serial_until_pattern(r"V√©rification de base termin√©e", timeout=90)
        
        # V√©rifications int√©grit√© Community
        integrity_checks = [
            "D√©marrage v√©rification de base",
            "Lecture m√©tadonn√©es firmware",
            "Calcul hash firmware",
            "V√©rification signature",
            "V√©rification de base termin√©e"
        ]
        
        for check in integrity_checks:
            self.assertIn(check, integrity_log, f"V√©rification int√©grit√© de base √©chou√©e: {check}")
        
        # V√©rifier le r√©sultat
        self.assertIn("Int√©grit√©: OK", integrity_log, "Int√©grit√© firmware compromise")
        
        # Extraire les statistiques de base
        stats_match = re.search(r"Firmware: (\d+) bytes, Hash: OK, Signature: OK, Temps: (\d+)ms", integrity_log)
        if stats_match:
            firmware_size = int(stats_match.group(1))
            verification_time = int(stats_match.group(2))
            
            print(f"  Firmware: {firmware_size} bytes, Temps: {verification_time}ms")
            
            # V√©rifications Community (moins strictes)
            self.assertGreater(firmware_size, 100000, "Firmware trop petit")
            self.assertLess(verification_time, 10000, f"V√©rification trop lente: {verification_time}ms > 10000ms")
        
        print("‚úÖ V√©rification d'int√©grit√© de base OK")
    
    def test_04_basic_attestation(self):
        """Test d'attestation de base Community"""
        print("üéì Test attestation de base...")
        
        # Tester l'attestation de base (sur demande)
        self.ser.write(b"attestation_basic_test\n")
        attestation_log = self.read_serial_until_pattern(r"Attestation de base termin√©e", timeout=60)
        
        # V√©rifications attestation Community
        attestation_checks = [
            "D√©marrage attestation de base",
            "G√©n√©ration challenge",
            "Calcul r√©ponse attestation",
            "V√©rification r√©ponse",
            "Attestation de base termin√©e"
        ]
        
        for check in attestation_checks:
            self.assertIn(check, attestation_log, f"Attestation de base √©chou√©e: {check}")
        
        # V√©rifier le r√©sultat
        self.assertIn("Attestation: VALIDE", attestation_log, "Attestation invalide")
        
        print("‚úÖ Attestation de base OK")
    
    def test_05_basic_sensor_reading(self):
        """Test de lecture capteurs de base Community"""
        print("üéì Test lecture capteurs de base...")
        
        # Tester la lecture des capteurs
        self.ser.write(b"sensor_basic_reading\n")
        sensor_log = self.read_serial_until_pattern(r"Lecture capteur termin√©e", timeout=30)
        
        # V√©rifications capteurs Community
        sensor_checks = [
            "Initialisation capteur DHT22",
            "Configuration GPIO",
            "Lecture capteur d√©marr√©e",
            "Lecture capteur termin√©e"
        ]
        
        for check in sensor_checks:
            self.assertIn(check, sensor_log, f"Lecture capteur de base √©chou√©e: {check}")
        
        # Extraire les valeurs
        reading_match = re.search(r"Temp√©rature: ([\d.-]+)¬∞C, Humidit√©: ([\d.-]+)%", sensor_log)
        if reading_match:
            temp = float(reading_match.group(1))
            humidity = float(reading_match.group(2))
            
            print(f"  Lecture: {temp}¬∞C, {humidity}%")
            
            # V√©rifier les plages valides Community (DHT22)
            self.assertGreaterEqual(temp, -40.0, "Temp√©rature hors plage DHT22")
            self.assertLessEqual(temp, 80.0, "Temp√©rature hors plage DHT22")
            self.assertGreaterEqual(humidity, 0.0, "Humidit√© hors plage DHT22")
            self.assertLessEqual(humidity, 100.0, "Humidit√© hors plage DHT22")
        
        print("‚úÖ Lecture capteurs de base OK")
    
    def test_06_basic_anomaly_detection(self):
        """Test de d√©tection d'anomalies de base Community"""
        print("üéì Test d√©tection d'anomalies de base...")
        
        # Configurer la d√©tection par seuils fixes (Community)
        self.ser.write(b"anomaly_basic_config\n")
        time.sleep(2)
        
        # Simuler des donn√©es pour d√©tecter des anomalies
        self.ser.write(b"anomaly_basic_test\n")
        anomaly_log = self.read_serial_until_pattern(r"Test anomalies de base termin√©", timeout=60)
        
        # V√©rifications d√©tection Community
        anomaly_checks = [
            "Configuration seuils fixes",
            "Seuil temp√©rature:",
            "Seuil humidit√©:",
            "Test anomalies de base termin√©"
        ]
        
        for check in anomaly_checks:
            self.assertIn(check, anomaly_log, f"D√©tection anomalies de base √©chou√©e: {check}")
        
        # Extraire la configuration des seuils
        temp_threshold_match = re.search(r"Seuil temp√©rature: ([\d.]+)¬∞C", anomaly_log)
        hum_threshold_match = re.search(r"Seuil humidit√©: ([\d.]+)%", anomaly_log)
        
        if temp_threshold_match and hum_threshold_match:
            temp_threshold = float(temp_threshold_match.group(1))
            hum_threshold = float(hum_threshold_match.group(1))
            
            print(f"  Seuils: ¬±{temp_threshold}¬∞C, ¬±{hum_threshold}%")
            
            # V√©rifier des seuils raisonnables
            self.assertGreater(temp_threshold, 0, "Seuil temp√©rature invalide")
            self.assertGreater(hum_threshold, 0, "Seuil humidit√© invalide")
        
        print("‚úÖ D√©tection d'anomalies de base OK")
    
    def test_07_basic_configuration(self):
        """Test de configuration de base Community"""
        print("üéì Test configuration de base...")
        
        # Obtenir la configuration Community
        self.ser.write(b"get_basic_config\n")
        config_log = self.read_serial_until_pattern(r"Configuration de base", timeout=30)
        
        # V√©rifications configuration Community
        config_checks = [
            "Mode: Community compatible",
            "Crypto: Software",
            "Int√©grit√©: Boot seulement",
            "Attestation: Sur demande",
            "Anomalies: Seuils fixes"
        ]
        
        # Note: En Enterprise, ces modes peuvent √™tre disponibles en compatibilit√©
        config_present = []
        for check in config_checks:
            if check in config_log:
                config_present.append(check)
        
        print(f"  Modes Community disponibles: {len(config_present)}/{len(config_checks)}")
        
        # En Enterprise, au moins quelques modes Community devraient √™tre disponibles
        self.assertGreater(len(config_present), 2, "Pas assez de compatibilit√© Community")
        
        print("‚úÖ Configuration de base OK")
    
    def test_08_backward_compatibility(self):
        """Test de compatibilit√© descendante Community"""
        print("üéì Test compatibilit√© descendante...")
        
        # Tester les commandes Community classiques
        community_commands = [
            ("version", "Version"),
            ("status", "√âtat syst√®me"),
            ("info", "Informations"),
            ("help", "Aide")
        ]
        
        compatible_commands = 0
        
        for cmd, desc in community_commands:
            self.ser.write(f"{cmd}\n".encode())
            response_log = self.read_serial_until_pattern(f"{desc}|{cmd.upper()}", timeout=15)
            
            if desc in response_log or cmd.upper() in response_log:
                compatible_commands += 1
                print(f"  Commande '{cmd}': OK")
            else:
                print(f"  Commande '{cmd}': Non support√©e")
        
        # V√©rifier qu'au moins la majorit√© des commandes Community fonctionnent
        compatibility_rate = (compatible_commands / len(community_commands)) * 100
        print(f"  Taux de compatibilit√©: {compatibility_rate:.1f}%")
        
        self.assertGreater(compatibility_rate, 75, f"Compatibilit√© insuffisante: {compatibility_rate:.1f}% < 75%")
        
        print("‚úÖ Compatibilit√© descendante OK")
    
    def test_09_community_performance_baseline(self):
        """Test des performances de base Community"""
        print("üéì Test performances de base Community...")
        
        # Mesurer les performances en mode Community
        self.ser.write(b"performance_community_baseline\n")
        perf_log = self.read_serial_until_pattern(r"Baseline Community termin√©", timeout=90)
        
        # Extraire les m√©triques Community
        community_metrics = [
            (r"Boot time baseline: (\d+)ms", 15000, "Temps d√©marrage"),
            (r"Crypto baseline: (\d+)ms", 1000, "Crypto de base"),
            (r"Integrity baseline: (\d+)ms", 5000, "Int√©grit√© de base"),
            (r"Sensor baseline: (\d+)ms", 2000, "Lecture capteur")
        ]
        
        baseline_results = {}
        
        for pattern, max_time, metric_name in community_metrics:
            match = re.search(pattern, perf_log)
            if match:
                measured_time = int(match.group(1))
                baseline_results[metric_name] = measured_time
                
                print(f"  {metric_name}: {measured_time}ms")
                
                # V√©rifications plus souples pour Community
                self.assertLess(measured_time, max_time, 
                              f"{metric_name} Community trop lent: {measured_time}ms > {max_time}ms")
        
        print(f"  M√©triques Community collect√©es: {len(baseline_results)}")
        
        print("‚úÖ Performances de base Community OK")
    
    def test_10_community_feature_completeness(self):
        """Test de compl√©tude des fonctionnalit√©s Community"""
        print("üéì Test compl√©tude fonctionnalit√©s Community...")
        
        # V√©rifier que toutes les fonctionnalit√©s Community sont pr√©sentes
        self.ser.write(b"list_community_features\n")
        features_log = self.read_serial_until_pattern(r"Fonctionnalit√©s Community list√©es", timeout=30)
        
        # Liste des fonctionnalit√©s Community attendues
        expected_features = [
            "Crypto Software",
            "Int√©grit√© Boot",
            "Attestation Demande",
            "Capteurs DHT22",
            "Anomalies Seuils",
            "Configuration Basique",
            "Tests Unitaires",
            "Documentation"
        ]
        
        available_features = []
        
        for feature in expected_features:
            if feature in features_log:
                available_features.append(feature)
        
        completeness = (len(available_features) / len(expected_features)) * 100
        
        print(f"  Fonctionnalit√©s Community disponibles: {len(available_features)}/{len(expected_features)}")
        print(f"  Compl√©tude: {completeness:.1f}%")
        
        # En Enterprise, toutes les fonctionnalit√©s Community devraient √™tre disponibles
        self.assertGreater(completeness, 90, f"Compl√©tude Community insuffisante: {completeness:.1f}% < 90%")
        
        for feature in available_features:
            print(f"    ‚úÖ {feature}")
        
        missing_features = set(expected_features) - set(available_features)
        for feature in missing_features:
            print(f"    ‚ùå {feature}")
        
        print("‚úÖ Compl√©tude fonctionnalit√©s Community OK")

def run_community_features_tests():
    """Ex√©cute tous les tests de fonctionnalit√©s Community"""
    print("üéì D√©marrage des tests de fonctionnalit√©s Community dans Enterprise")
    print("=" * 65)
    
    # Cr√©er la suite de tests
    test_suite = unittest.TestLoader().loadTestsFromTestCase(SecureIoTVIFCommunityFeaturesTests)
    
    # Ex√©cuter les tests
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(test_suite)
    
    # R√©sum√© des tests Community
    print("=" * 65)
    if result.wasSuccessful():
        print("‚úÖ Tous les tests de fonctionnalit√©s Community sont pass√©s avec succ√®s!")
        print("üéì Compatibilit√© Community dans Enterprise valid√©e")
    else:
        print(f"‚ùå {len(result.failures)} tests √©chou√©s, {len(result.errors)} erreurs")
        
        for test, error in result.failures + result.errors:
            print(f"‚ùå {test}: {error}")
    
    return result.wasSuccessful()

if __name__ == "__main__":
    success = run_community_features_tests()
    exit(0 if success else 1)